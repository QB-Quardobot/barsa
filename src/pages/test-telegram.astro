---
// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram WebApp
---

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Telegram WebApp Test</title>
  
  <!-- Telegram WebApp API -->
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 600px;
      margin: 20px auto;
      padding: 20px;
      background: #0a0a0a;
      color: #fff;
    }
    .status {
      padding: 15px;
      margin: 10px 0;
      border-radius: 8px;
      background: #1a1a1a;
      border-left: 4px solid #3b82f6;
    }
    .success { border-left-color: #22c55e; }
    .error { border-left-color: #ef4444; }
    .warning { border-left-color: #f59e0b; }
    button {
      padding: 12px 24px;
      margin: 10px 5px;
      border: none;
      border-radius: 6px;
      background: #3b82f6;
      color: white;
      cursor: pointer;
      font-size: 14px;
    }
    button:hover {
      background: #2563eb;
    }
    pre {
      background: #000;
      padding: 15px;
      border-radius: 6px;
      overflow-x: auto;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <h1>üß™ Telegram WebApp Test</h1>
  
  <div id="status"></div>
  
  <div>
    <button onclick="testInit()">üîÑ Test Init</button>
    <button onclick="testFullscreen()">üì± Request Fullscreen</button>
    <button onclick="testSwipes()">üö´ Disable Swipes</button>
    <button onclick="showInfo()">‚ÑπÔ∏è Show Info</button>
  </div>
  
  <h2>Console Log:</h2>
  <pre id="log"></pre>
  
  <script>
    const statusDiv = document.getElementById('status');
    const logDiv = document.getElementById('log');
    let logs = [];
    
    function addLog(msg, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const logMsg = `[${timestamp}] ${msg}`;
      logs.push(logMsg);
      logDiv.textContent = logs.slice(-20).join('\n');
      console.log(logMsg);
      
      if (type !== 'info') {
        const statusClass = type === 'success' ? 'success' : type === 'error' ? 'error' : 'warning';
        statusDiv.innerHTML = `<div class="status ${statusClass}">${msg}</div>`;
      }
    }
    
    function testInit() {
      addLog('Testing Telegram WebApp initialization...');
      
      if (!window.Telegram) {
        addLog('‚ùå window.Telegram not found!', 'error');
        return false;
      }
      
      if (!window.Telegram.WebApp) {
        addLog('‚ùå window.Telegram.WebApp not found!', 'error');
        return false;
      }
      
      const tg = window.Telegram.WebApp;
      addLog(`‚úÖ Telegram WebApp found!`, 'success');
      addLog(`Version: ${tg.version}`);
      addLog(`Platform: ${tg.platform}`);
      addLog(`Color Scheme: ${tg.colorScheme}`);
      
      try {
        addLog('Calling ready()...');
        tg.ready();
        addLog('‚úÖ ready() called');
        
        addLog('Calling expand()...');
        tg.expand();
        addLog(`‚úÖ expand() called, isExpanded: ${tg.isExpanded}`);
        
        addLog('Calling enableClosingConfirmation()...');
        tg.enableClosingConfirmation();
        addLog('‚úÖ enableClosingConfirmation() called');
        
        return true;
      } catch (error) {
        addLog(`‚ùå Error: ${error.message}`, 'error');
        return false;
      }
    }
    
    function testFullscreen() {
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        addLog('‚ùå Telegram WebApp not available', 'error');
        return;
      }
      
      addLog('Testing fullscreen...');
      
      if (typeof tg.requestFullscreen !== 'function') {
        addLog('‚ö†Ô∏è requestFullscreen not available (need Bot API 8.0+)', 'warning');
        addLog(`Current version: ${tg.version}`);
        return;
      }
      
      try {
        addLog('Calling requestFullscreen()...');
        tg.requestFullscreen();
        
        setTimeout(() => {
          addLog(`isFullscreen: ${tg.isFullscreen}`);
          if (tg.isFullscreen) {
            addLog('‚úÖ Fullscreen activated!', 'success');
          } else {
            addLog('‚ö†Ô∏è Fullscreen not activated', 'warning');
          }
        }, 500);
      } catch (error) {
        addLog(`‚ùå Error: ${error.message}`, 'error');
      }
    }
    
    function testSwipes() {
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        addLog('‚ùå Telegram WebApp not available', 'error');
        return;
      }
      
      addLog('Testing vertical swipes...');
      
      if (typeof tg.disableVerticalSwipes !== 'function') {
        addLog('‚ö†Ô∏è disableVerticalSwipes not available (need Bot API 7.7+)', 'warning');
        addLog(`Current version: ${tg.version}`);
        return;
      }
      
      try {
        addLog('Calling disableVerticalSwipes()...');
        tg.disableVerticalSwipes();
        
        setTimeout(() => {
          addLog(`isVerticalSwipesEnabled: ${tg.isVerticalSwipesEnabled}`);
          if (!tg.isVerticalSwipesEnabled) {
            addLog('‚úÖ Vertical swipes disabled!', 'success');
          } else {
            addLog('‚ö†Ô∏è Vertical swipes still enabled', 'warning');
          }
        }, 100);
      } catch (error) {
        addLog(`‚ùå Error: ${error.message}`, 'error');
      }
    }
    
    function showInfo() {
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        addLog('‚ùå Telegram WebApp not available', 'error');
        return;
      }
      
      const info = {
        version: tg.version,
        platform: tg.platform,
        colorScheme: tg.colorScheme,
        isExpanded: tg.isExpanded,
        isFullscreen: tg.isFullscreen,
        isActive: tg.isActive,
        isVerticalSwipesEnabled: tg.isVerticalSwipesEnabled,
        viewportHeight: tg.viewportHeight,
        viewportStableHeight: tg.viewportStableHeight,
        hasRequestFullscreen: typeof tg.requestFullscreen === 'function',
        hasDisableVerticalSwipes: typeof tg.disableVerticalSwipes === 'function'
      };
      
      addLog('=== Telegram WebApp Info ===');
      Object.entries(info).forEach(([key, value]) => {
        addLog(`${key}: ${value}`);
      });
    }
    
    // Auto-test on load
    window.addEventListener('load', () => {
      addLog('Page loaded, starting auto-test...');
      setTimeout(() => {
        if (testInit()) {
          setTimeout(() => {
            testSwipes();
            setTimeout(() => {
              testFullscreen();
            }, 500);
          }, 500);
        }
      }, 100);
    });
    
    addLog('Script initialized, waiting for page load...');
  </script>
</body>
</html>
