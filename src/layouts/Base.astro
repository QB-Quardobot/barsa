---
import '../styles/global.css';
import { parseUTMFromURL } from '../lib/utm';
import LoadingScreen from '../components/LoadingScreen.astro';

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = 'Инновационный продукт для вашего бизнеса', image = '/og.jpg' } = Astro.props;
// Derive origin from Astro.site when provided, otherwise from current URL
const requestUrl = Astro.url.toString();
const origin = (Astro.site ? (Astro.site as URL).origin : new URL(requestUrl).origin);
const fullTitle = `${title} | Product`;

// Get UTM parameters from URL
const url = Astro.url.toString();
const utmParams = parseUTMFromURL(url);

// Analytics IDs (set via environment variables or public env)
const GA4_MEASUREMENT_ID = import.meta.env.PUBLIC_GA4_MEASUREMENT_ID || null;
const YM_COUNTER_ID = import.meta.env.PUBLIC_YM_COUNTER_ID || null;
---

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  
  <!-- Primary Meta Tags -->
  <title>{fullTitle}</title>
  <meta name="title" content={fullTitle}>
  <meta name="description" content={description}>
  <meta name="author" content="Product Team">
  <meta name="robots" content="index, follow">
  <meta name="language" content="Russian">
  <link rel="canonical" href={Astro.url.href}>
  <link rel="alternate" hrefLang="ru" href={Astro.url.href}>
  
  <!-- Theme Color -->
  <meta name="theme-color" content="#0a0a0a">
  <meta name="msapplication-TileColor" content="#0a0a0a">
  <meta name="color-scheme" content="dark light">
  <meta name="referrer" content="no-referrer-when-downgrade">
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content={Astro.url.href}>
  <meta property="og:title" content={fullTitle}>
  <meta property="og:description" content={description}>
  <meta property="og:image" content={new URL(image, Astro.site || origin).href}>
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="630">
  <meta property="og:image:type" content="image/jpeg">
  <meta property="og:site_name" content="Product">
  <meta property="og:locale" content="ru_RU">
  
  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content={Astro.url.href}>
  <meta name="twitter:title" content={fullTitle}>
  <meta name="twitter:description" content={description}>
  <meta name="twitter:image" content={new URL(image, Astro.site || origin).href}>
  <meta name="twitter:image:alt" content={fullTitle}>
  
  <!-- Preload Fonts -->
  <link rel="preload" href="/fonts/inter-regular.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/inter-medium.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/inter-bold.woff2" as="font" type="font/woff2" crossorigin>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="manifest" href="/manifest.webmanifest">
  
  <!-- Performance Hints -->
  <link rel="preconnect" href="https://telegram.org" crossorigin>
  <link rel="dns-prefetch" href="//telegram.org">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin>
  <link rel="preconnect" href="https://mc.yandex.ru" crossorigin>
  
  {/* Analytics configuration - IDs passed to client script */}
  {GA4_MEASUREMENT_ID && (
    <script type="text/plain" data-ga4-id={GA4_MEASUREMENT_ID}></script>
  )}
  {YM_COUNTER_ID && (
    <script type="text/plain" data-ym-id={YM_COUNTER_ID}></script>
  )}
  
  <!-- Telegram Mini App Safe Area Support -->
  <style>
    :root {
      /* Safe area insets from Telegram WebApp */
      --tg-safe-area-inset-top: env(safe-area-inset-top, 0px);
      --tg-safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);
      --tg-safe-area-inset-left: env(safe-area-inset-left, 0px);
      --tg-safe-area-inset-right: env(safe-area-inset-right, 0px);
      
      /* Viewport height that accounts for safe areas */
      --tg-viewport-height: 100vh;
      --tg-viewport-stable-height: 100vh;
    }
    
    /* Telegram WebApp specific styles */
    body.tg-webapp {
      overscroll-behavior: none;
      -webkit-overflow-scrolling: touch;
      position: fixed;
      width: 100%;
      height: 100vh;
      overflow: hidden;
      /* Disable text selection for native app feel */
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      /* Disable long-press context menu */
      -webkit-touch-callout: none;
    }
    
    /* Main content scrollable area (only in Telegram) */
    body.tg-webapp #main-content {
      width: 100%;
      height: 100vh;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      padding-top: var(--tg-safe-area-inset-top);
      padding-bottom: var(--tg-safe-area-inset-bottom);
      padding-left: var(--tg-safe-area-inset-left);
      padding-right: var(--tg-safe-area-inset-right);
    }
    
    /* Safe area padding for non-Telegram */
    body:not(.tg-webapp) #main-content {
      padding-top: var(--tg-safe-area-inset-top);
      padding-bottom: var(--tg-safe-area-inset-bottom);
      padding-left: var(--tg-safe-area-inset-left);
      padding-right: var(--tg-safe-area-inset-right);
    }
    
    /* Ensure buttons respect safe areas */
    .btn-capsule,
    button,
    a[data-cta] {
      -webkit-tap-highlight-color: transparent;
      touch-action: manipulation;
    }
  </style>
  
  <!-- Telegram WebApp API - loads synchronously BEFORE inline scripts -->
  <script is:inline src="https://telegram.org/js/telegram-web-app.js"></script>
  
  <!-- JSON-LD Schema -->
  <script type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: 'AI Model 2.0',
    url: Astro.url.href,
    inLanguage: 'ru-RU',
    potentialAction: {
      '@type': 'SearchAction',
      target: `${Astro.url.origin}/?q={search_term_string}`,
      'query-input': 'required name=search_term_string'
    },
    publisher: {
      '@type': 'Organization',
      name: 'AI Model 2.0',
      url: Astro.url.origin
    }
  })}></script>
  
  <!-- Pass UTM params to client -->
  <script define:vars={{ utmParams: JSON.stringify(utmParams) }}>
    window.utmParams = utmParams;
  </script>
  
  <!-- Initialize UTM, Telegram WebApp and CTA links (consolidated) -->
  <script is:inline>
    (function() {
      const win = window;
      const doc = document;
      let tg = null; // Telegram WebApp instance
      
      // Production-safe logger
      const isDev = win.location.hostname === 'localhost' || win.location.hostname === '127.0.0.1' || win.location.hostname.includes('.ngrok.io') || win.location.hostname.includes('.trycloudflare.com');
      const logger = {
        log: function(...args) { if (isDev) console.log(...args); },
        warn: function(...args) { if (isDev) console.warn(...args); },
        error: function(...args) { console.error(...args); }
      };
      
      // Cleanup registry
      const cleanupFunctions = [];
      function registerCleanup(fn) {
        cleanupFunctions.push(fn);
        return function() {
          const index = cleanupFunctions.indexOf(fn);
          if (index > -1) cleanupFunctions.splice(index, 1);
        };
      }
      
      // Cleanup on unload
      const unloadCleanup = function() {
        cleanupFunctions.forEach(function(fn) { try { fn(); } catch (e) {} });
        cleanupFunctions.length = 0;
      };
      win.addEventListener('beforeunload', unloadCleanup);
      
      // UTM helpers
      const storedUtmKey = 'utm_params';
      const utm = (win.utmParams && typeof win.utmParams === 'object') ? win.utmParams : {};
      if (Object.keys(utm).length) {
        try { sessionStorage.setItem(storedUtmKey, JSON.stringify(utm)); } catch {}
      }

      function getStoredUTM() {
        try { return JSON.parse(sessionStorage.getItem(storedUtmKey) || '{}'); } catch { return {}; }
      }
      function withUTM(url) {
        const params = getStoredUTM();
        if (!Object.keys(params).length) return url;
        try {
          const u = new URL(url);
          Object.entries(params).forEach(([k, v]) => { if (v && !u.searchParams.has(k)) u.searchParams.set(k, v); });
          return u.toString();
        } catch {
          const qs = new URLSearchParams(params).toString();
          return url + (url.includes('?') ? '&' : '?') + qs;
        }
      }

      // Initialize Telegram WebApp
      function initTelegramWebApp() {
        try {
          logger.log('[TG-Init] Function called');
        tg = win.Telegram?.WebApp;
        if (!tg) {
            logger.log('[TG-Init] WebApp not available - running in browser');
          return false;
        }
        
          logger.log('[TG-Init] Found WebApp v' + tg.version + ' on ' + tg.platform);
          logger.log('[TG-Init] Current state: isExpanded=' + tg.isExpanded + ', isFullscreen=' + tg.isFullscreen);
          
          // Initialize app
          logger.log('[TG-Init] Calling ready()...');
          tg.ready();
          
          logger.log('[TG-Init] Calling expand()...');
          tg.expand();
          
          logger.log('[TG-Init] Calling enableClosingConfirmation()...');
          tg.enableClosingConfirmation();
          
          // Bot API 7.7+: Disable vertical swipes to prevent accidental closing
          if (typeof tg.disableVerticalSwipes === 'function') {
            logger.log('[TG-Init] Calling disableVerticalSwipes()...');
            tg.disableVerticalSwipes();
            logger.log('[TG-Init] After disableVerticalSwipes: isVerticalSwipesEnabled=' + tg.isVerticalSwipesEnabled);
          } else {
            logger.warn('[TG-Init] disableVerticalSwipes not available');
          }
          
          // Bot API 8.0+: Request fullscreen mode
          if (typeof tg.requestFullscreen === 'function') {
            logger.log('[TG-Init] Calling requestFullscreen()...');
            try {
              tg.requestFullscreen();
              logger.log('[TG-Init] After requestFullscreen: isFullscreen=' + tg.isFullscreen);
            } catch (err) {
              logger.warn('[TG-Init] Fullscreen error:', err);
            }
          } else {
            logger.warn('[TG-Init] requestFullscreen not available');
          }
        } catch (error) {
          logger.error('[TG-Init] Error:', error);
        }
        
        // Apply theme
        const p = tg.themeParams || {};
        const root = doc.documentElement.style;
        if (p.bg_color) root.setProperty('--tg-theme-bg-color', p.bg_color);
        if (p.text_color) root.setProperty('--tg-theme-text-color', p.text_color);
        if (p.hint_color) root.setProperty('--tg-theme-hint-color', p.hint_color);
        if (p.link_color) root.setProperty('--tg-theme-link-color', p.link_color);
        if (p.button_color) root.setProperty('--tg-theme-button-color', p.button_color);
        if (p.button_text_color) root.setProperty('--tg-theme-button-text-color', p.button_text_color);
        if (p.secondary_bg_color) root.setProperty('--tg-theme-secondary-bg-color', p.secondary_bg_color);
        
        // Event handlers
        tg.onEvent('themeChanged', () => location.reload());
        tg.onEvent('fullscreenFailed', function(err) { logger.warn('[Telegram] Fullscreen failed:', err); });
        
        // Hide Telegram banner if shown
        const banner = doc.getElementById('telegram-banner');
        if (banner) banner.style.display = 'none';

        // Expose global helpers
        win.requestAppFullscreen = function() {
          if (typeof tg.requestFullscreen === 'function') {
            try { tg.requestFullscreen(); return true; } catch (e) { logger.warn(e); }
          }
          return false;
        };
        
        win.exitAppFullscreen = function() {
          if (typeof tg.exitFullscreen === 'function') {
            try { tg.exitFullscreen(); return true; } catch (e) { logger.warn(e); }
          }
          return false;
        };
        
        // Debug info (use getTelegramInfo() in console)
        win.getTelegramInfo = function() {
          return !tg ? 'Not in Telegram' : {
            version: tg.version,
            platform: tg.platform,
            isExpanded: tg.isExpanded,
            isFullscreen: tg.isFullscreen,
            isVerticalSwipesEnabled: tg.isVerticalSwipesEnabled,
            viewportHeight: tg.viewportHeight
          };
        };

        // Basic haptics helper
        const haptics = tg.HapticFeedback;
        const triggerHaptic = (type = 'medium') => {
          try {
            if (!haptics) return;
            if (type === 'selection') haptics.selectionChanged();
            else if (type === 'success') haptics.notificationOccurred('success');
            else if (type === 'warning') haptics.notificationOccurred('warning');
            else if (type === 'error') haptics.notificationOccurred('error');
            else haptics.impactOccurred(type);
          } catch {}
        };
        win.triggerAppHaptic = triggerHaptic;

        // Prevent closing by swipe/back button
        try {
          // Back button interception (Android)
          if (tg.BackButton) {
            tg.BackButton.show();
            tg.BackButton.onClick(() => {
              tg.showConfirm?.('Закрыть приложение?', (ok) => {
                if (ok) tg.close();
              });
            });
          }
        } catch {}
        
        return true;
      }

      // Track click with Google Analytics 4 & Яндекс.Метрика
      function trackClick(href, buttonText) {
        try {
          // Get UTM params from sessionStorage
          const utmParams = getStoredUTM();
          
          // Google Analytics 4: Track CTA click event
          if (typeof gtag !== 'undefined' && gtag) {
            gtag('event', 'cta_click', {
              event_category: 'CTA',
              event_label: buttonText || '',
              link_url: href,
              ...(utmParams.utm_source && { utm_source: utmParams.utm_source }),
              ...(utmParams.utm_medium && { utm_medium: utmParams.utm_medium }),
              ...(utmParams.utm_campaign && { utm_campaign: utmParams.utm_campaign }),
              ...(utmParams.utm_term && { utm_term: utmParams.utm_term }),
              ...(utmParams.utm_content && { utm_content: utmParams.utm_content }),
            });
          }
          
          // Яндекс.Метрика: Track goal (cta_click)
          if (typeof ym !== 'undefined' && ym && window.ym) {
            // Get counter ID from ym function (first initialized counter)
            if (window.ym.a && window.ym.a.length > 0 && window.ym.a[0][0]) {
              const ymId = window.ym.a[0][0];
              try {
                window.ym(ymId, 'reachGoal', 'cta_click', {
                  label: buttonText || '',
                  href: href,
                });
              } catch (e) {}
            }
          }
        } catch (e) {
          // Silent fail for analytics
        }
      }
      
      // Initialize session ID for analytics (if not exists)
      if (typeof sessionStorage !== 'undefined' && !sessionStorage.getItem('analytics_session_id')) {
        sessionStorage.setItem('analytics_session_id', 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9));
      }
      
      // CTA links + haptics + proper Telegram link handling
      function setupCTALinks() {
        const isTelegram = !!tg;
        const haptics = isTelegram ? tg.HapticFeedback : null;
        const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        
        doc.querySelectorAll('a[data-cta]').forEach(link => {
          const href = link.getAttribute('href') || '';
          const buttonText = link.textContent.trim();
          const isTelegramLink = href.includes('t.me/') || href.startsWith('https://t.me/');
          
          // Haptic feedback for touch devices (Telegram only)
          if (isTelegram && haptics && isTouchDevice) {
            // Light haptic on touch start
            link.addEventListener('touchstart', function() {
              try {
                haptics.impactOccurred('light');
              } catch (e) {}
            }, { passive: true, once: false });
            
            // Selection haptic on hover (desktop Telegram or pointer devices)
            link.addEventListener('pointerenter', function() {
              try {
                haptics.selectionChanged();
              } catch (e) {}
            }, { passive: true });
          }
          
          link.addEventListener('click', function(e) {
            if (!href) return;
            
            const urlWithUtm = withUTM(href);
            
            // Track click
            trackClick(urlWithUtm, buttonText);
            
            // Medium haptic on click (Telegram only)
            if (isTelegram && haptics) {
              try {
                haptics.impactOccurred('medium');
              } catch (e) {}
            }
            
            if (isTelegram) {
              e.preventDefault();
              
              // For Telegram links, use openTelegramLink (stays in app)
              // For external links, use openLink (opens in browser)
              if (isTelegramLink && typeof tg.openTelegramLink === 'function') {
                try {
                  tg.openTelegramLink(urlWithUtm);
                } catch (err) {
                  // Fallback to openLink if openTelegramLink fails
                  try { tg.openLink(urlWithUtm); } catch {}
                }
              } else {
                // External link - open in browser
                try {
                  tg.openLink(urlWithUtm);
                } catch {}
              }
            } else {
              // Not in Telegram - open in new tab
              this.target = '_blank';
              this.rel = 'noopener noreferrer';
              this.href = urlWithUtm;
            }
          });
        });

        // Fullscreen toggles: any element with [data-fullscreen]
        doc.querySelectorAll('[data-fullscreen]')?.forEach(btn => {
          btn.addEventListener('click', () => {
            let ok = false;
            if (tg) { try { ok = (win.requestAppFullscreen && win.requestAppFullscreen()) || false; } catch {} }
            if (!ok) {
              // Desktop fallback via Fullscreen API (must be user gesture)
              const el = doc.documentElement;
              const req = el.requestFullscreen || el.webkitRequestFullscreen || el.mozRequestFullScreen || el.msRequestFullscreen;
              if (req) try { req.call(el); } catch {}
            }
          });
        });
      }

      function updateLinksOnLoad() {
        if (tg) return;
        const params = getStoredUTM();
        if (!Object.keys(params).length) return;
        doc.querySelectorAll('a[data-cta]').forEach(link => {
          const href = link.getAttribute('href');
          if (href && !href.includes('utm_')) link.setAttribute('href', withUTM(href));
        });
      }

      // Initialize Google Analytics 4 & Яндекс.Метрика
      function initAnalytics() {
        // Get IDs from script tag (injected by Astro)
        const ga4IdEl = doc.querySelector('script[data-ga4-id]');
        const ymIdEl = doc.querySelector('script[data-ym-id]');
        const ga4Id = ga4IdEl ? ga4IdEl.getAttribute('data-ga4-id') : null;
        const ymId = ymIdEl ? ymIdEl.getAttribute('data-ym-id') : null;
        
        // Google Analytics 4
        if (ga4Id && typeof window !== 'undefined') {
          try {
            // Load gtag.js
            const script = document.createElement('script');
            script.async = true;
            script.src = 'https://www.googletagmanager.com/gtag/js?id=' + ga4Id;
            document.head.appendChild(script);
            
            // Initialize dataLayer
            window.dataLayer = window.dataLayer || [];
            window.gtag = function() {
              if (window.dataLayer) {
                window.dataLayer.push(arguments);
              }
            };
            
            window.gtag('js', new Date());
            window.gtag('config', ga4Id, {
              send_page_view: true,
              page_location: window.location.href,
              page_title: document.title,
            });
            
            // Track initial page view with UTM (GA4 automatically captures UTM from URL)
            setTimeout(() => {
              const utmParams = getStoredUTM();
              const urlParams = new URLSearchParams(window.location.search);
              
              // UTM уже передаются автоматически через page_location, но можно явно указать
              if (window.gtag) {
                window.gtag('event', 'page_view', {
                  page_path: window.location.pathname + window.location.search,
                  page_title: document.title,
                });
              }
            }, 100);
          } catch (e) {
            logger.warn('[Analytics] GA4 init failed:', e);
          }
        }
        
        // Яндекс.Метрика
        if (ymId && typeof window !== 'undefined') {
          try {
            const counterId = Number(ymId);
            
            // Create ym function
            (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
            m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
            (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
            
            // Initialize counter
            if (window.ym) {
              window.ym(counterId, "init", {
                clickmap: true,
                trackLinks: true,
                accurateTrackBounce: true,
                webvisor: true
              });
            }
            
            // Create noscript fallback
            const noscript = document.createElement('noscript');
            noscript.innerHTML = '<div><img src="https://mc.yandex.ru/watch/' + counterId + '" style="position:absolute; left:-9999px;" alt="" /></div>';
            document.body.appendChild(noscript);
          } catch (e) {
            logger.warn('[Analytics] Yandex Metrika init failed:', e);
          }
        }
      }

      // Initialize error handling (must be first)
      if (typeof window !== 'undefined') {
        try {
          // Global error handler
          window.onerror = function(message, source, lineno, colno, error) {
            logger.error('[Global Error]', message, error || { source, lineno, colno });
            return false; // Allow default handling
          };
          
          // Unhandled promise rejections
          window.addEventListener('unhandledrejection', function(event) {
            logger.error('[Unhandled Promise]', event.reason);
          });
        } catch (e) {
          logger.error('[Init] Error handler setup failed:', e);
        }
      }
      
      // Main initialization - fast and simple
      function init() {
        try {
          logger.log('[Init] Running initialization...');
          initTelegramWebApp();
          initAnalytics();
          setupCTALinks();
          updateLinksOnLoad();
          logger.log('[Init] Initialization complete');
        } catch (error) {
          logger.error('[Init] Initialization error:', error);
        }
      }

      // ALWAYS use window.load to ensure everything is ready (like test page)
      const loadHandler = function() {
        logger.log('[Init] window.load event - starting init');
        try {
          init();
        } catch (error) {
          logger.error('[Init] Load handler error:', error);
        }
      };
      win.addEventListener('load', loadHandler);
      registerCleanup(function() { win.removeEventListener('load', loadHandler); });
    })();
  </script>
</head>
<body>
  <!-- Loading Screen (shows in Telegram Mini App only by default) -->
  <LoadingScreen />
  
  <!-- Skip to main content link for accessibility -->
  <a href="#main-content" class="skip-to-main">
    Перейти к основному содержимому
  </a>
  
  <main id="main-content">
    <slot />
  </main>
  
  <!-- Telegram WebApp initialization script - MUST be at end of body -->
  <script is:inline>
    (function() {
      const win = window;
      const doc = document;
      
      // Wait for Telegram WebApp to be available
      function initTelegramApp() {
        if (!win.Telegram?.WebApp) {
          setTimeout(initTelegramApp, 50);
          return;
        }
        
        const tg = win.Telegram.WebApp;
        logger.log('[TG] Initializing v' + tg.version + ' on ' + tg.platform);
        
        // Add class to body to enable Telegram-specific styles
        doc.body.classList.add('tg-webapp');
        
        // Initialize
        tg.ready();
        tg.expand();
        tg.enableClosingConfirmation();
        
        // Update CSS variables with Telegram viewport data
        if (tg.viewportHeight) {
          doc.documentElement.style.setProperty('--tg-viewport-height', tg.viewportHeight + 'px');
        }
        if (tg.viewportStableHeight) {
          doc.documentElement.style.setProperty('--tg-viewport-stable-height', tg.viewportStableHeight + 'px');
        }
        
        // Update safe area insets if available
        if (tg.safeAreaInset) {
          doc.documentElement.style.setProperty('--tg-safe-area-inset-top', tg.safeAreaInset.top + 'px');
          doc.documentElement.style.setProperty('--tg-safe-area-inset-bottom', tg.safeAreaInset.bottom + 'px');
          doc.documentElement.style.setProperty('--tg-safe-area-inset-left', tg.safeAreaInset.left + 'px');
          doc.documentElement.style.setProperty('--tg-safe-area-inset-right', tg.safeAreaInset.right + 'px');
        }
        
        // Listen for viewport changes
        tg.onEvent('viewportChanged', () => {
          if (tg.viewportHeight) {
            doc.documentElement.style.setProperty('--tg-viewport-height', tg.viewportHeight + 'px');
          }
          if (tg.viewportStableHeight) {
            doc.documentElement.style.setProperty('--tg-viewport-stable-height', tg.viewportStableHeight + 'px');
          }
        });
        
        // Bot API 7.7+: Disable vertical swipes
        if (typeof tg.disableVerticalSwipes === 'function') {
          tg.disableVerticalSwipes();
        }
        
        // Bot API 8.0+: Request fullscreen
        if (typeof tg.requestFullscreen === 'function') {
          try {
            tg.requestFullscreen();
          } catch (err) {
            logger.warn('[TG] Fullscreen error:', err);
          }
        }
        
        // Setup haptics for interactive elements (excluding CTA links - handled separately)
        const haptics = tg.HapticFeedback;
        const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        
        if (haptics && isTouchDevice) {
          // Function to add haptic to element
          function addHapticToElement(el) {
            if (!el || el.hasAttribute('data-haptic-attached')) return;
            
            el.setAttribute('data-haptic-attached', 'true');
            
            // Light haptic on touchstart (with rate limiting)
            el.addEventListener('touchstart', function() {
              try {
                if (rateLimiter.isAllowed()) {
                  haptics.impactOccurred('light');
                }
              } catch (e) {}
            }, { passive: true });
          }
          
          // Rate limiter for haptics (prevents spam)
          const rateLimiter = (function() {
            const requests = new Map();
            const maxRequests = 100;
            const windowMs = 1000;
            
            function isAllowed() {
              const now = Date.now();
              const key = 'haptics';
              let record = requests.get(key);
              
              if (!record) {
                record = { timestamps: [] };
                requests.set(key, record);
              }
              
              // Remove old timestamps
              record.timestamps = record.timestamps.filter(ts => now - ts < windowMs);
              
              if (record.timestamps.length < maxRequests) {
                record.timestamps.push(now);
                return true;
              }
              
              return false;
            }
            
            return { isAllowed };
          })();
          
          // DOM cache for haptic elements (optimize repeated queries)
          const hapticCache = new Map();
          
          // Function to setup haptics for elements (with retry for dynamic content)
          function setupHapticsForElements() {
            const clickableSelectors = [
              'button:not([data-cta]):not(.btn-capsule)',
              'a[href]:not([data-cta])',
              '[role="button"]:not([data-cta])',
              '.proof-item',
              '.proof-image-placeholder',
              '.student-photo',
              '.student-circle',
              '.banner-photo',
              '.models-banner > div',
              '.step-card',
              '.system-step',
              '.benefit-item',
              '.timeline-step',
              '.step-marker',
              '.founder-avatar',
              '.photo-circle',
              '.earning-corner'
            ];
            
            clickableSelectors.forEach(selector => {
              try {
                // Use cache if available
                let elements = hapticCache.get(selector);
                const cacheTime = hapticCache.get(selector + ':time') || 0;
                const now = Date.now();
                
                // Cache for 2 seconds
                if (!elements || (now - cacheTime) > 2000) {
                  elements = doc.querySelectorAll(selector);
                  hapticCache.set(selector, elements);
                  hapticCache.set(selector + ':time', now);
                }
                
                elements.forEach(el => {
                  addHapticToElement(el);
                });
              } catch (e) {
                logger.warn('[TG] Haptic setup error for selector:', selector, e);
              }
            });
          }
          
          // Setup immediately
          setupHapticsForElements();
          
          // Retry after delays (for dynamic content that loads later)
          const timeout1 = setTimeout(setupHapticsForElements, 300);
          const timeout2 = setTimeout(setupHapticsForElements, 1000);
          const timeout3 = setTimeout(setupHapticsForElements, 2000);
          registerCleanup(function() {
            clearTimeout(timeout1);
            clearTimeout(timeout2);
            clearTimeout(timeout3);
          });
          
          // Event delegation as fallback (catches any missed elements)
          const delegationHandler = function(e) {
            if (!haptics) return;
            
            const target = e.target;
            if (!target) return;
            
            // Check if touched element is one of our interactive elements
            const isInteractive = target.closest('.proof-item, .proof-image-placeholder, .student-photo, .student-circle, .banner-photo, .models-banner > div, .step-card, .benefit-item, .timeline-step, .founder-avatar, .photo-circle, .earning-corner');
            
            if (isInteractive) {
              // Skip if already has direct listener (avoid double haptic)
              if (isInteractive.hasAttribute('data-haptic-attached')) {
                return; // Direct listener will handle it
              }
              
              // Add to element if not already added
              addHapticToElement(isInteractive);
              
              // Trigger haptic immediately via delegation (only for elements without direct listener)
              try {
                if (rateLimiter.isAllowed()) {
                  haptics.impactOccurred('light');
                }
              } catch (err) {}
            }
          };
          const delegationOpts = { passive: true, capture: false };
          doc.addEventListener('touchstart', delegationHandler, delegationOpts);
          registerCleanup(function() {
            doc.removeEventListener('touchstart', delegationHandler, delegationOpts);
          });
          
          // Medium haptic on click for buttons (non-CTA) - use cached query
          let buttonElements = hapticCache.get('button:not([data-cta]):not(.btn-capsule), [role="button"]:not([data-cta])');
          if (!buttonElements) {
            buttonElements = doc.querySelectorAll('button:not([data-cta]):not(.btn-capsule), [role="button"]:not([data-cta])');
            hapticCache.set('button:not([data-cta]):not(.btn-capsule), [role="button"]:not([data-cta])', buttonElements);
          }
          buttonElements.forEach(function(el) {
            const clickHandler = function() {
              try {
                if (rateLimiter.isAllowed()) {
                  haptics.impactOccurred('medium');
                }
              } catch (e) {}
            };
            el.addEventListener('click', clickHandler);
            registerCleanup(function() {
              el.removeEventListener('click', clickHandler);
            });
          });
        }
        
        // Expose global haptics helper (always available)
        if (haptics) {
          win.triggerHaptic = (type = 'medium') => {
            try {
              if (type === 'selection') haptics.selectionChanged();
              else if (type === 'success') haptics.notificationOccurred('success');
              else if (type === 'warning') haptics.notificationOccurred('warning');
              else if (type === 'error') haptics.notificationOccurred('error');
              else haptics.impactOccurred(type);
            } catch (e) {}
          };
        }
        
        logger.log('[TG] ✅ Ready');
        
        // Setup touch events for interactive elements (replace hover)
        // Visual feedback for touch interactions
        if (isTouchDevice) {
          // Use cached query if available
          const touchSelector = '.reveal-up, .proof-item, .proof-image-placeholder, .student-photo, .student-circle, .banner-photo, .models-banner > div, .step-card, .cta-section, button, a[data-cta], .btn-capsule, .timeline-step';
          let touchElements = hapticCache.get(touchSelector);
          if (!touchElements) {
            touchElements = doc.querySelectorAll(touchSelector);
            hapticCache.set(touchSelector, touchElements);
          }
          const touchOpts = { passive: true };
          
          touchElements.forEach(function(el) {
            const touchStartHandler = function() {
              this.classList.add('touch-active');
            };
            const touchEndHandler = function() {
              const self = this;
              const timeout = setTimeout(function() {
                self.classList.remove('touch-active');
              }, 150);
              registerCleanup(function() { clearTimeout(timeout); });
            };
            const touchCancelHandler = function() {
              this.classList.remove('touch-active');
            };
            
            el.addEventListener('touchstart', touchStartHandler, touchOpts);
            el.addEventListener('touchend', touchEndHandler, touchOpts);
            el.addEventListener('touchcancel', touchCancelHandler, touchOpts);
            
            registerCleanup(function() {
              el.removeEventListener('touchstart', touchStartHandler, touchOpts);
              el.removeEventListener('touchend', touchEndHandler, touchOpts);
              el.removeEventListener('touchcancel', touchCancelHandler, touchOpts);
            });
          });
        }
      }
      
      // Start initialization
      initTelegramApp();
    })();
  </script>
  
  <!-- Touch interaction styles for Telegram -->
  <style>
    /* Touch feedback for all interactive elements (Telegram only) */
    body.tg-webapp .touch-active {
      transform: scale(0.97);
      opacity: 0.85;
      transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* Enhanced touch feedback for buttons (Telegram only) */
    body.tg-webapp button.touch-active,
    body.tg-webapp .btn-capsule.touch-active,
    body.tg-webapp a[data-cta].touch-active {
      transform: scale(0.95);
      opacity: 0.9;
    }
    
    /* Disable hover effects in Telegram (they don't work) */
    body.tg-webapp *:hover {
      transform: none !important;
    }
    
    body.tg-webapp .reveal-up:hover,
    body.tg-webapp .proof-item:hover,
    body.tg-webapp .step-card:hover,
    body.tg-webapp .btn-capsule:hover,
    body.tg-webapp button:hover,
    body.tg-webapp a:hover {
      transform: none !important;
      box-shadow: none !important;
    }
    
    /* Better touch targets for Telegram */
    body.tg-webapp button,
    body.tg-webapp a[href],
    body.tg-webapp .btn-capsule {
      min-height: 44px;
      min-width: 44px;
    }
  </style>
</body>
</html>

